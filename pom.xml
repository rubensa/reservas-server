<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.0.RELEASE</version>
    <relativePath /> <!-- lookup parent from repository -->
  </parent>
  <groupId>org.eu.rubensa.uniovi</groupId>
  <artifactId>reservas-server</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>reservas-server</name>
  <description>Plataforma web para la gesti√≥n de reservas de aulas y espacios comunes</description>

  <properties>
    <java.version>11</java.version>

    <maven.version>3.6.3</maven.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- Plugin versions (only those that are not defined in `spring-boot-starter-parent`) -->
    <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
    <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
    <maven-jxr-plugin.version>3.0.0</maven-jxr-plugin.version>
    <jdepend-maven-plugin.version>2.0</jdepend-maven-plugin.version>
    <maven-pmd-plugin.version>3.13.0</maven-pmd-plugin.version>
    <findbugs-maven-plugin.version>3.0.5</findbugs-maven-plugin.version>
    <taglist-maven-plugin.version>2.4</taglist-maven-plugin.version>
    <site-maven-plugin.version>0.12</site-maven-plugin.version>
    <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
    <heroku-maven-plugin.verion>2.0.5</heroku-maven-plugin.verion>
    <maven-dependency-plugin.version>3.1.2</maven-dependency-plugin.version>
    <maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
    <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
    <maven-site-plugin.version>3.8.2</maven-site-plugin.version>

    <!-- Spring Boot doesn't have this property... so, this is needed -->
    <maven-surefire-report-plugin.version>3.0.0-M4</maven-surefire-report-plugin.version>

    <!-- Overriding Spring Boot's version so that this version matches Maven Surefire Report Plugin version -->
    <maven-surefire-plugin.version>3.0.0-M4</maven-surefire-plugin.version>
    <surefire-junit47.version>3.0.0-M4</surefire-junit47.version>

    <!-- Do not deploy to maven repo -->
    <maven.deploy.skip>true</maven.deploy.skip>

    <!-- Custom properties -->
    <docker.image.prefix>rubensa</docker.image.prefix>
    <full-artifact-name>target/${project.artifactId}-${project.version}-exec.jar</full-artifact-name>
    <!-- GitHub OAuth token & server -->
    <github.global.server>github</github.global.server>
    <github.global.oauth2Token>${env.GITHUB_OAUTH_TOKEN}</github.global.oauth2Token>
  </properties>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>rubensa</id>
      <name>Ruben Saurez</name>
      <email>rubensa@gmail.com</email>
      <url>https://github.com/rubensa</url>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git://github.com/rubensa/reservas-server.git</connection>
    <developerConnection>scm:git:git://github.com/rubensa/reservas-server.git</developerConnection>
    <url>https://github.com/rubensa/reservas-server</url>
  </scm>

  <organization>
    <name>rubensa</name>
    <url>https://github.com/rubensa</url>
  </organization>

  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/rubensa/reservas-server/issues</url>
  </issueManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven-site-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${maven-project-info-reports-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jxr-plugin</artifactId>
          <version>${maven-jxr-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>jdepend-maven-plugin</artifactId>
          <version>${jdepend-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-pmd-plugin</artifactId>
          <version>${maven-pmd-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>findbugs-maven-plugin</artifactId>
          <version>${findbugs-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>taglist-maven-plugin</artifactId>
          <version>${taglist-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.github.github</groupId>
          <artifactId>site-maven-plugin</artifactId>
          <version>${site-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>${maven-surefire-report-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${maven-javadoc-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${maven-source-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven-dependency-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>dockerfile-maven-plugin</artifactId>
          <version>${dockerfile-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.heroku.sdk</groupId>
          <artifactId>heroku-maven-plugin</artifactId>
          <version>${heroku-maven-plugin.verion}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!--
      Enable Spring Boot support.
      http://docs.spring.io/spring-boot/docs/current/maven-plugin/
      -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <!--
          Create 2 artifacts: one as dependency and another as executable fat JAR
          See https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-create-an-additional-executable-jar
          -->
          <classifier>exec</classifier>
        </configuration>
        <executions>
          <execution>
            <id>build-info</id>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Versions Maven Plugin - Makes it easier to upgrade plugins and dependencies
      http://www.mojohaus.org/versions-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>

      <!--
      Surefire Maven Plugin - Runs unit tests.
      http://maven.apache.org/surefire/maven-surefire-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Allow all reflection access for third party libraries -->
          <argLine>
            --illegal-access=permit
          </argLine>

          <!-- Redirect JBoss logging to SLF4J -->
          <systemPropertyVariables>
            <org.jboss.logging.provider>slf4j</org.jboss.logging.provider>
          </systemPropertyVariables>

          <!-- The first 4 patterns are SureFire's default. Adding Spock's `*Spec` default pattern. -->
          <includes>
            <include>**/Test*.class</include>
            <include>**/*Test.class</include>
            <include>**/*Tests.class</include>
            <include>**/*TestCase.class</include>
            <include>**/*Spec.class</include>
          </includes>
          <excludes>
            <exclude>**/Abstract*.class</exclude>
          </excludes>
        </configuration>
      </plugin>

      <!--
      Maven Failsafe Plugin - Runs integration tests.
      http://maven.apache.org/surefire/maven-failsafe-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- Allow all reflection access for third party libraries -->
          <argLine>
            --illegal-access=permit
          </argLine>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Site Plugin - Generates site.
      http://maven.apache.org/plugins/maven-site-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <configuration>
          <relativizeDecorationLinks>false</relativizeDecorationLinks>
        </configuration>
        <executions>
          <!--
          In Maven 3, site:attach-descriptor has been removed from the built-in lifecycle bindings,
          so need to explicitly define `attach-descriptor` goal to pick up src/site/site.xml.
          -->
          <execution>
            <id>attach-descriptor</id>
            <goals>
              <goal>attach-descriptor</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      JaCoCo Maven Plugin - Code coverage report for JVM languages.
      http://www.eclemma.org/jacoco/
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/generated/**</exclude>
            <exclude>**/scratch/**</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-prepare-agent-integration</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report-integration</id>
            <goals>
              <goal>report-integration</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Enforcer Plugin - Bans certain dependencies and ensure minimum Maven version is used.
      http://maven.apache.org/enforcer/maven-enforcer-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <!--
          If these banned dependencies exist, fail the build right away.
          Xalan, Xerces and Xml-APIs - Known to cause problem when deployed to server. Use the ones
          provided by server.
          See http://stackoverflow.com/questions/11677572/dealing-with-xerces-hell-in-java-maven
          -->
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <fail>true</fail>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>xalan</exclude>
                    <exclude>xerces</exclude>
                    <exclude>xml-apis</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
            </configuration>
          </execution>
          <!--
          Ensures everyone is using at least the specified Maven version or later.
          -->
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.version}</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Source Plugin - Generates source JAR file.
      https://maven.apache.org/plugins/maven-source-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Apache Maven Dependency Plugin - Manipulate artifacts.
      https://maven.apache.org/plugins/maven-dependency-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <!-- 
          Unpack the resulting jar 
          -->
          <execution>
            <id>unpack</id>
            <phase>package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <classifier>exec</classifier>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
      GitHub Site Plugin - Generates Maven site in project GitHub page.
      https://github.com/github/maven-plugins
      -->
      <plugin>
        <groupId>com.github.github</groupId>
        <artifactId>site-maven-plugin</artifactId>
        <configuration>
          <message>Creating site for ${project.version}</message>
          <server>github</server>
          <!--
          Need to disable Jekyll because JaCoCo static files are stored in `.resources` directory.
          -->
          <noJekyll>true</noJekyll>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>site</goal>
            </goals>
            <phase>site</phase>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Javadoc Plugin - Generates Javadoc.
      https://maven.apache.org/plugins/maven-javadoc-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!--
          Shuts off non-error and non-warning messages, leaving only the warnings and errors
          appear, making them easier to view.
          -->
          <quiet>true</quiet>
        </configuration>
      </plugin>

      <!-- 
      Dockerfile Maven - Integrate Maven with Docker
      https://github.com/spotify/dockerfile-maven
      -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <configuration>
          <dockerfile>docker/Dockerfile</dockerfile>
          <contextDirectory>.</contextDirectory>
          <repository>${docker.image.prefix}/${project.artifactId}</repository>
          <tag>${project.version}</tag>
          <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
          <buildArgs>
            <DEPENDENCY>target/dependency</DEPENDENCY>
          </buildArgs>
        </configuration>
      </plugin>

      <!--
      Heroku Maven Plugin - Deploy Java applications directly to Heroku without pushing to a Git repository
      https://github.com/heroku/heroku-maven-plugin
      -->
      <plugin>
        <groupId>com.heroku.sdk</groupId>
        <artifactId>heroku-maven-plugin</artifactId>
        <configuration>
          <appName>rubensa-reservas-server</appName>
          <jdkVersion>11</jdkVersion>
          <processTypes>
            <web>java $JAVA_OPTS -jar -Dserver.port=$PORT ${full-artifact-name}</web>
          </processTypes>
          <includeTarget>false</includeTarget>
          <includes>
            <include>${full-artifact-name}</include>
          </includes>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <reporting>
    <plugins>
      <!--
      Maven Project Info Reports Plugin - Generates reports information about the project.
      https://maven.apache.org/plugins/maven-project-info-reports-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <configuration>
          <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
        </configuration>
      </plugin>

      <!--
      Maven Surefire Reports Plugin - Parses generated test results from both unit tests and integration tests.
      http://maven.apache.org/surefire/maven-surefire-report-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>failsafe-report-only</report>
              <report>report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
      JaCoCo Maven Plugin - Code coverage report for JVM languages.
      http://www.eclemma.org/jacoco/
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
      Maven Javadoc Plugin - Generates Javadoc.
      https://maven.apache.org/plugins/maven-javadoc-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <!--
          Shuts off non-error and non-warning messages, leaving only the warnings and errors
          appear, making them easier to view.
          -->
          <quiet>true</quiet>
        </configuration>
      </plugin>

      <!--
      Maven JXR Plugin - Generates a cross-reference of the project's sources.
      http://maven.apache.org/plugins/maven-jxr-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
      </plugin>

      <!--
      JDepend Maven Plugin - Generates design quality metrics for each Java package.
      http://www.mojohaus.org/jdepend-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jdepend-maven-plugin</artifactId>
      </plugin>

      <!--
      Maven PMD Plugin - Generates PMD and CPD reports.
      http://maven.apache.org/plugins/maven-pmd-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <configuration>
          <!--suppress MavenModelInspection -->
          <targetJdk>${jdk.version}</targetJdk>
          <excludes>
            <exclude>**/generated/**</exclude>
            <exclude>**/scratch/**</exclude>
          </excludes>
          <excludeRoots>
            <excludeRoot>target/generated-sources</excludeRoot>
          </excludeRoots>
        </configuration>
      </plugin>

      <!--
      FindBugs Maven Plugin - Inspects Java bytecode for occurrences of bug patterns.
      http://www.mojohaus.org/findbugs-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <configuration>
          <xmlOutput>true</xmlOutput>
        </configuration>
      </plugin>

      <!--
      TagList Maven Plugin - Generates a report on various tags found in the code.
      http://www.mojohaus.org/taglist-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>taglist-maven-plugin</artifactId>
        <configuration>
          <tagListOptions>
            <tagClasses>
              <tagClass>
                <displayName>Todo</displayName>
                <tags>
                  <tag>
                    <matchString>todo</matchString>
                    <matchType>ignoreCase</matchType>
                  </tag>
                  <tag>
                    <matchString>FIXME</matchString>
                    <matchType>exact</matchType>
                  </tag>
                </tags>
              </tagClass>
              <tagClass>
                <displayName>Cleanup</displayName>
                <tags>
                  <tag>
                    <matchString>@deprecated</matchString>
                    <matchType>exact</matchType>
                  </tag>
                </tags>
              </tagClass>
            </tagClasses>
          </tagListOptions>
        </configuration>
      </plugin>
    </plugins>
  </reporting>

</project>